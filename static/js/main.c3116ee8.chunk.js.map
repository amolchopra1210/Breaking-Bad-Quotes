{"version":3,"sources":["Component/Header.js","Component/Quotes.js","Component/NewQuote.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Fragment","className","Quotes","props","quotation","author","NewQuote","onClick","refresh","App","state","quotes","refreshQuote","fetch","then","data","json","result","_this","setState","quote","this","src_Component_Header","src_Component_Quotes","Component_NewQuote","React","Component","ReactDOM","render","App_App","document","getElementById","Boolean","window","location","hostname","match","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAaeA,SAVD,WACV,OACIC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,OAAKE,UAAY,UACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAY,eAAjB,oBCMDC,QAXF,SAACC,GACV,OACIN,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,OAAKE,UAAY,YACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAY,UAAUE,EAAMC,WACjCP,EAAAC,EAAAC,cAAA,OAAKE,UAAY,gBAAjB,IAAkCE,EAAME,YCEzCC,EAPA,SAACH,GACZ,OACIN,EAAAC,EAAAC,cAAA,OAAKE,UAAY,iBACbJ,EAAAC,EAAAC,cAAA,UAAQQ,QAAWJ,EAAMK,SAAzB,aCCNC,6MACNC,MAAQ,CACNC,OAAQ,GACRN,OAAQ,MAGVO,aAAe,WACbC,MAAM,uDACLC,KAAK,SAAAC,GAAI,OAAEA,EAAKC,OAChBF,KAAK,SAAAG,GAAM,OAAEC,EAAKC,SAAS,CAC1BR,OAASM,EAAO,GAAGG,MACnBf,OAASY,EAAO,GAAGZ,iGAIrBgB,KAAKT,gDAIH,OACEf,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAACuB,EAAD,MACAzB,EAAAC,EAAAC,cAACwB,EAAD,CAAQnB,UAAaiB,KAAKX,MAAMC,OAChCN,OAAUgB,KAAKX,MAAML,SAErBR,EAAAC,EAAAC,cAACyB,EAAD,CAAUhB,QAAWa,KAAKT,uBAzBhBa,IAAMC,WA+BxBC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAAOC,SAASC,eAAe,SAEhCtB,QC3BKuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNT,IAASC,OAAO/B,EAAAC,EAAAC,cAACsC,EAAD,MAASP,SAASC,eAAe,SD2H3C,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.c3116ee8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css'\r\n\r\nlet Header  = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <nav className = \"navbar\">\r\n                <div className = \"nav-content\">Breaking Bad</div>\r\n            </nav>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Quotes.css';\r\nlet Quotes = (props) => {\r\n    return (      \r\n        <React.Fragment>\r\n            <div className = \"quoteBox\">\r\n                <div className = \"quotes\">{props.quotation}</div>\r\n                <div className = \"quotesAuthor\">-{props.author}</div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n\r\n}\r\nexport default Quotes;","import React from 'react';\r\nimport './Quotes.css';\r\nlet NewQuote = (props) => {\r\n    return (\r\n        <div className = \"refreshButton\">\r\n            <button onClick = {props.refresh}>Refresh</button>\r\n        </div>  \r\n    )\r\n}\r\nexport default NewQuote;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Header from './Component/Header';\nimport Quotes from './Component/Quotes';\nimport NewQuote from './Component/NewQuote';\n\nclass App extends React.Component {\nstate = {\n  quotes: '',\n  author: ''\n}\n\nrefreshQuote = () => {\n  fetch(\"https://breaking-bad-quotes.herokuapp.com/v1/quotes\")\n  .then(data=>data.json()\n  .then(result=>this.setState({\n    quotes : result[0].quote,\n    author : result[0].author\n  })))\n}\ncomponentDidMount(){\n  this.refreshQuote();\n}\n\n  render(){\n    return(\n      <React.Fragment>\n        <Header/>\n        <Quotes quotation = {this.state.quotes}\n        author = {this.state.author}\n        />\n        <NewQuote refresh = {this.refreshQuote}/>\n      </React.Fragment>\n      )\n  }\n}\n\nReactDOM.render(<App/>,document.getElementById(\"root\"));\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}